// Code generated by MockGen. DO NOT EDIT.
// Source: C:\work\src\github.com\vadgun\goApp\user_registration\internal\repository\user_repo.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/vadgun/goApp/user_registration/internal/entity"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// ExistsByEmailOrPhone mocks base method.
func (m *MockUserRepository) ExistsByEmailOrPhone(email, phone string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistsByEmailOrPhone", email, phone)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ExistsByEmailOrPhone indicates an expected call of ExistsByEmailOrPhone.
func (mr *MockUserRepositoryMockRecorder) ExistsByEmailOrPhone(email, phone interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistsByEmailOrPhone", reflect.TypeOf((*MockUserRepository)(nil).ExistsByEmailOrPhone), email, phone)
}

// GetByEmailOrUser mocks base method.
func (m *MockUserRepository) GetByEmailOrUser(email string) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEmailOrUser", email)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEmailOrUser indicates an expected call of GetByEmailOrUser.
func (mr *MockUserRepositoryMockRecorder) GetByEmailOrUser(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEmailOrUser", reflect.TypeOf((*MockUserRepository)(nil).GetByEmailOrUser), email)
}

// Save mocks base method.
func (m *MockUserRepository) Save(user entity.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockUserRepositoryMockRecorder) Save(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockUserRepository)(nil).Save), user)
}
